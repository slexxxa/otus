# Default values for otusapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  auth:
    repository: slexxa/auth
    pullPolicy: IfNotPresent
    tag: "v0.0.7"
  billing:
    repository: slexxa/billing
    pullPolicy: IfNotPresent
    tag: "v0.0.1"
  windows:
    repository: slexxa/windows
    pullPolicy: IfNotPresent
    tag: "v0.0.4"
  notify:
    repository: slexxa/notify
    pullPolicy: IfNotPresent
    tag: "v0.0.2"
  store:
    repository: slexxa/store
    pullPolicy: IfNotPresent
    tag: "v0.0.1"
  delivery:
    repository: slexxa/delivery
    pullPolicy: IfNotPresent
    tag: "v0.0.1"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""


# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations:
  prometheus.io/port: "8000"
  prometheus.io/scrape: "true"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  auth: 
    port: 80
    targetport: 8000
  billing:
    port: 80
    targetport: 8000
  windows:
    port: 80
    targetport: 8000
  notify:
    port: 80
    targetport: 8000
  store:
    port: 80
    targetport: 8000
  delivery:
    port: 80
    targetport: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    auth:
    - host: arch.homework
      http:
        paths:
        - path: "/auth(.*)"
          pathType: Prefix
          backend:
            service:
              name: auth
              port:
                number: 80
    billing:
    - host: arch.homework
      http:
        paths:
        - path: "/billing(.*)"
          pathType: Prefix
          backend:
            service:
              name: billing
              port:
                number: 80
    windows:
    - host: arch.homework
      http:
        paths:
        - path: "/windows(.*)"
          pathType: Prefix
          backend:
            service:
              name: windows
              port:
                number: 80
    notify:
    - host: arch.homework
      http:
        paths:
        - path: "/notify(.*)"
          pathType: Prefix
          backend:
            service:
              name: notify
              port:
                number: 80
    store:
    - host: arch.homework
      http:
        paths:
        - path: "/store(.*)"
          pathType: Prefix
          backend:
            service:
              name: store
              port:
                number: 80
    delivery:
    - host: arch.homework
      http:
        paths:
        - path: "/delivery(.*)"
          pathType: Prefix
          backend:
            service:
              name: delivery
              port:
                number: 80

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: 8000
readinessProbe:
  httpGet:
    path: /health
    port: 8000

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

db:
  image: "bitnami/postgresql:17.0.0-debian-12-r6"
  host: postgresql
  user: postgres
  dbname:
    auth: auth
    billing: billing
    windows: windows
    notify: notify
  migrationScript: |
     CREATE DATABASE auth; 
     \c auth
     CREATE TABLE users (
       id bigserial primary key,
       username varchar(20) UNIQUE,
       password varchar(20),
       firstname varchar(20),
       lastname varchar(20),
       email varchar(20),
       phone varchar(20) ); 
     INSERT INTO users (username, password) VALUES ('admin','admin');

     CREATE DATABASE billing;
     \c billing
     CREATE TABLE billing (
     id bigserial primary key,
     username varchar(20) UNIQUE,
     money integer,
     constraint money_nonnegative check (money >= 0));

     CREATE DATABASE windows;
     \c windows
     CREATE TABLE windows (
     id bigserial primary key,
     th varchar(20) UNIQUE,
     cost integer );
     INSERT INTO windows (th, cost) VALUES ('tabouret',500);
     INSERT INTO windows (th, cost) VALUES ('cow',2500);
     INSERT INTO windows (th, cost) VALUES ('pin',50);
     INSERT INTO windows (th, cost) VALUES ('cleaner',1000);
     INSERT INTO windows (th, cost) VALUES ('car',10000);
     
     CREATE TABLE order_table (
     id bigserial primary key,
     th varchar(20),
     cost integer,
     username varchar(20),
     email varchar(20),
     phone varchar(20),
     is_payed boolean DEFAULT false,
     is_booked boolean DEFAULT false,
     is_delivered boolean DEFAULT false );

     CREATE TABLE for_idenpotentoncy (
     x_request_id varchar(30) primary key,
     date timestamp NOT NULL DEFAULT NOW() );

     CREATE DATABASE notify;
     \c notify
     CREATE TABLE email (
     id bigserial primary key,
     email varchar(20),
     message text );

     CREATE DATABASE store;
     \c store
     CREATE TABLE store (
     id bigserial primary key,
     th varchar(20),
     quantity integer,
     constraint quantity_nonnegative check (quantity >= 0) );
     INSERT INTO store (th, quantity) VALUES ('tabouret',10);
     INSERT INTO store (th, quantity) VALUES ('cow',4);
     INSERT INTO store (th, quantity) VALUES ('pin',50);
     INSERT INTO store (th, quantity) VALUES ('cleaner',8);
     INSERT INTO store (th, quantity) VALUES ('car',2);

     CREATE TABLE reservation (
     order_id bigserial primary key,
     th varchar(20),
     quantity integer );


     CREATE DATABASE delivery;
     \c delivery
     CREATE TABLE delivery (
     order_id bigserial primary key,
     th varchar(20),
     username varchar(20),
     phone varchar(20),
     quantity integer );

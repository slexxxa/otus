# Default values for otusapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: slexxa/flask
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.0.6"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""


# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations:
  prometheus.io/port: "8000"
  prometheus.io/scrape: "true"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  name: flaskservice
  port: 80
  targetport: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
  - host: arch.homework
    http:
      paths:
      - path: "/(.*)"
        pathType: Prefix
        backend:
          service:
            name: flaskservice
            port:
              number: 80
  - host: arch.homework
    http:
      paths:
      - backend:
          service:
            name: flaskservice
            port:
              number: 80
        path: "/otusapp(.*)"
        pathType: Prefix

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: 8000
readinessProbe:
  httpGet:
    path: /health
    port: 8000

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

db:
  image: "bitnami/postgresql:17.0.0-debian-12-r6"
  host: postgresql
  user: postgres
  dbname: otus
  migrationScript: |
     CREATE DATABASE auth; 
     \c auth
     CREATE TABLE users (
       id bigserial primary key,
       username varchar(20) UNIQUE,
       password varchar(20),
       firstname varchar(20),
       lastname varchar(20),
       email varchar(20),
       phone varchar(20) ); 
     INSERT INTO users (username, password) VALUES ('admin','admin');

     CREATE DATABASE billing;
     \c billing
     CREATE TABLE billing (
     id bigserial primary key,
     username varchar(20) UNIQUE,
     money integer );

     CREATE DATABASE windows;
     \c windows
     CREATE TABLE windows (
     id bigserial primary key,
     th varchar(20) UNIQUE,
     cost integer );
     INSERT INTO windows (th, cost) VALUES ('tabouret',500);
     INSERT INTO windows (th, cost) VALUES ('cow',2500);
     INSERT INTO windows (th, cost) VALUES ('pin',50);
     INSERT INTO windows (th, cost) VALUES ('cleaner',1000);
     INSERT INTO windows (th, cost) VALUES ('car',10000);

     CREATE DATABASE notyfy;
     \c notyfy
     CREATE TABLE email (
     id bigserial primary key,
     email varchar(20),
     message text );
